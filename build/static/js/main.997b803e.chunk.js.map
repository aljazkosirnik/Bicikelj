{"version":3,"sources":["serviceWorker.js","components/Table.js","components/Marker.js","components/GoogleMap.js","layout/App.js","index.js"],"names":["Boolean","window","location","hostname","match","List","data","loading","react_default","a","createElement","Table","celled","inverted","selectable","className","Header","Row","HeaderCell","Body","carto","markers","marker","map","key","_attributes","number","Cell","address","stations","station","available","_text","free","useMap","_ref","googleMap","mapContainerRef","mapInfo","useEffect","current","maps","Map","infoWindows","push","Marker","position","lat","parseFloat","lng","InfoWindow","content","concat","fullAddress","_loop","i","addListener","open","close","length","wait","zoom","center","App","_useState","useState","_useState2","Object","slicedToArray","setData","_useState3","_useState4","setStations","_useState5","_useState6","setLoading","proxyurl","url","_fetchData","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","fetch","then","response","text","contents","JSON","parse","convert","xml2json","compact","spaces","catch","error","console","log","stop","apply","this","arguments","fetchStationInfo","_callee","stationArray","result","finalResult","_context","axios","sent","fetchData","apiKey","setGoogleMap","GoogleMapsApiLoader","google","useGoogleMap","useRef","Dimmer","active","Loader","size","Grid","stackable","columns","Column","width","Segment","ref","components_Table","ReactDOM","render","layout_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yGCwBSC,EAvCF,SAAAC,GAEZ,GAAoB,GAAhBA,EAAKC,QACR,OACCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAQ,EAACC,YAAU,EAACC,UAAU,QAC3CP,EAAAC,EAAAC,cAACC,EAAA,EAAMK,OAAP,KACCR,EAAAC,EAAAC,cAACC,EAAA,EAAMM,IAAP,KACCT,EAAAC,EAAAC,cAACC,EAAA,EAAMO,WAAP,gBACAV,EAAAC,EAAAC,cAACC,EAAA,EAAMO,WAAP,2BACAV,EAAAC,EAAAC,cAACC,EAAA,EAAMO,WAAP,oCAGFV,EAAAC,EAAAC,cAACC,EAAA,EAAMQ,KAAP,KAEEb,EAAKA,KAAKc,MAAMC,QAAQC,OAAOC,IAAI,SAAAD,GACnC,OACCd,EAAAC,EAAAC,cAACC,EAAA,EAAMM,IAAP,CAAWO,IAAKF,EAAOG,YAAYC,QAClClB,EAAAC,EAAAC,cAACC,EAAA,EAAMgB,KAAP,KAAaL,EAAOG,YAAYG,SAChCpB,EAAAC,EAAAC,cAACC,EAAA,EAAMgB,KAAP,KAEErB,EAAKuB,SAASP,EAAOG,YAAYC,OAAS,GAAGI,QAC3CC,UAAUC,OAGdxB,EAAAC,EAAAC,cAACC,EAAA,EAAMgB,KAAP,KAEErB,EAAKuB,SAASP,EAAOG,YAAYC,OAAS,GAAGI,QAAQG,KACnDD,aC3BNE,EAAS,SAAAC,GAQT,IANLC,EAMKD,EANLC,UACAC,EAKKF,EALLE,gBACAC,EAIKH,EAJLG,QACAhC,EAGK6B,EAHL7B,KACAuB,EAEKM,EAFLN,SACAtB,EACK4B,EADL5B,QAwDAgC,oBAAU,YAtDV,WACC,GAAKH,GAAcC,EAAgBG,QAAnC,CAKA,IAAMjB,EAAM,IAAIa,EAAUK,KAAKC,IAAIL,EAAgBG,QAASF,GACtDjB,EAAU,GACVsB,EAAc,GAEpBrC,EAAKc,MAAMC,QAAQC,OAAOC,IAAI,SAAAD,GAE7BD,EAAQuB,KACP,IAAIR,EAAUK,KAAKI,OAAO,CACzBC,SAAU,CACTC,IAAKC,WAAW1B,EAAOG,YAAYsB,KACnCE,IAAKD,WAAW1B,EAAOG,YAAYwB,MAEpC1B,IAAKA,KAKPoB,EAAYC,KACX,IAAIR,EAAUK,KAAKS,WAAW,CAC7BC,QAAO,mDAAAC,OACC9B,EAAOG,YAAY4B,YADpB,iDAAAD,OAGJvB,EAASP,EAAOG,YAAYC,OAAS,GAAGI,QAAQC,UAAUC,MAHtD,wDAAAoB,OAMJvB,EAASP,EAAOG,YAAYC,OAAS,GAAGI,QAAQG,KAAKD,MANjD,gCAcV,IAvCe,IAAAsB,EAAA,SAuCNC,GACRlC,EAAQkC,GAAGC,YAAY,YAAa,WACnCb,EAAYY,GAAGE,KAAKlC,EAAKF,EAAQkC,MAGlClC,EAAQkC,GAAGC,YAAY,WAAY,WAClCb,EAAYY,GAAGG,MAAMnC,EAAKF,EAAQkC,OAN3BA,EAAI,EAAGA,EAAIlC,EAAQsC,OAAQJ,IAAKD,EAAhCC,IAgBTK,IACE,CAACrD,uBCtDC+B,EAAU,CACfuB,KAAM,GACNC,OAAQ,CAAEf,IAAK,UAAWE,IAAK,mFCyEjBc,EAjFH,WAAM,IAAAC,EACOC,mBAAS,MADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACV1D,EADU4D,EAAA,GACJG,EADIH,EAAA,GAAAI,EAEeL,mBAAS,IAFxBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEVzC,EAFU0C,EAAA,GAEAC,EAFAD,EAAA,GAAAE,EAGaR,oBAAS,GAHtBS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGVlE,EAHUmE,EAAA,GAGDC,EAHCD,EAAA,GAMXE,EAAW,+CACXC,EAAM,uCAPK,SAAAC,IAAA,OAAAA,EAAAX,OAAAY,EAAA,EAAAZ,CAAAa,EAAAvE,EAAAwE,KAWjB,SAAAC,IAAA,OAAAF,EAAAvE,EAAA0E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACOC,MAAMX,EAAWC,GACrBW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAQ,OACbtB,EAECuB,KAAKC,MAAMC,IAAQC,SAASJ,EAAU,CAAEK,SAAS,EAAMC,OAAQ,QAGhEC,MAAM,SAAAC,GAAK,OACXC,QAAQC,IACP,qBAAkBxB,EAAM,qCAAuCsB,KAXnE,wBAAAf,EAAAkB,SAAApB,OAXiBqB,MAAAC,KAAAC,WA4BjB,IAAMC,EAAgB,eAAAvE,EAAAgC,OAAAY,EAAA,EAAAZ,CAAAa,EAAAvE,EAAAwE,KAAG,SAAA0B,IAAA,IAAApD,EAAAqD,EAAAC,EAAAC,EAAA,OAAA9B,EAAAvE,EAAA0E,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAEpBsB,EAAe,GAEdrD,EAAI,EAJe,YAIZA,GAAK,IAJO,CAAAwD,EAAAzB,KAAA,gBAAAyB,EAAAzB,KAAA,EAKF0B,IAAMpC,EAzBV,2DAyBkCrB,GAL5B,OAKjBsD,EALiBE,EAAAE,KAMnBH,EAAclB,KAAKC,MACtBC,IAAQC,SAASc,EAAOvG,KAAM,CAAE0F,SAAS,EAAMC,OAAQ,KAExDW,EAAahE,KAAKkE,GATK,OAIHvD,IAJGwD,EAAAzB,KAAA,gBAYxBd,EAAYoC,GAEZjC,GAAW,GAda,yBAAAoC,EAAAT,SAAAK,MAAH,yBAAAxE,EAAAoE,MAAAC,KAAAC,YAAA,GAkBtBlE,oBAAU,YA9CO,WAAAuC,EAAAyB,MAAAC,KAAAC,WA+ChBS,GACAR,KACE,IAGH,IAAMtE,EDxDc,SAAA+E,GAAU,IAAAnD,EACIC,mBAAS,MADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvB5B,EADuB8B,EAAA,GACZkD,EADYlD,EAAA,GAO9B,OALA3B,oBAAU,WACT8E,IAAoB,CAAEF,WAAU3B,KAAK,SAAA8B,GACpCF,EAAaE,MAEZ,IACIlF,ECiDWmF,CAAa,2CACzBlF,EAAkBmF,iBAAO,MAI/B,OAFAtF,EAAO,CAAEE,YAAWC,kBAAiBC,UAAShC,OAAMuB,WAAUtB,YAE/C,GAAXA,EAEFC,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAQC,QAAM,EAAC7G,UAAQ,GACtBL,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAQ9G,UAAQ,EAACsC,QAAQ,UAAUyE,KAAK,OAAO7G,UAAU,YAK1DP,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SACvBvH,EAAAC,EAAAC,cAACmH,EAAA,EAAKG,OAAN,CAAaC,MAAO,IACnBzH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,KACC1H,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMoH,IAAK9F,MAG5B7B,EAAAC,EAAAC,cAACmH,EAAA,EAAKG,OAAN,KACCxH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,KACC1H,EAAAC,EAAAC,cAAC0H,EAAD,CAAM9H,KAAMA,EAAMC,QAASA,EAASsB,SAAUA,sBC1EpDwG,IAASC,OAAO9H,EAAAC,EAAAC,cAAC6H,EAAD,MAASC,SAASC,eAAe,SL0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.997b803e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\n\r\nconst List = data => {\r\n\t// If App.js is still fetching data, wait\r\n\tif (data.loading == false) {\r\n\t\treturn (\r\n\t\t\t<Table celled inverted selectable className=\"list\">\r\n\t\t\t\t<Table.Header>\r\n\t\t\t\t\t<Table.Row>\r\n\t\t\t\t\t\t<Table.HeaderCell>Postaja</Table.HeaderCell>\r\n\t\t\t\t\t\t<Table.HeaderCell>Število koles</Table.HeaderCell>\r\n\t\t\t\t\t\t<Table.HeaderCell>Število prostih mest</Table.HeaderCell>\r\n\t\t\t\t\t</Table.Row>\r\n\t\t\t\t</Table.Header>\r\n\t\t\t\t<Table.Body>\r\n\t\t\t\t\t{/* For each station display table row */}\r\n\t\t\t\t\t{data.data.carto.markers.marker.map(marker => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Table.Row key={marker._attributes.number}>\r\n\t\t\t\t\t\t\t\t<Table.Cell>{marker._attributes.address}</Table.Cell>\r\n\t\t\t\t\t\t\t\t<Table.Cell>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdata.stations[marker._attributes.number - 1].station\r\n\t\t\t\t\t\t\t\t\t\t\t.available._text\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Table.Cell>\r\n\t\t\t\t\t\t\t\t<Table.Cell>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdata.stations[marker._attributes.number - 1].station.free\r\n\t\t\t\t\t\t\t\t\t\t\t._text\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Table.Cell>\r\n\t\t\t\t\t\t\t</Table.Row>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Table.Body>\r\n\t\t\t</Table>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default List;\r\n","import { useEffect } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\n\r\nconst useMap = ({\r\n\t// All this data is from App.js\r\n\tgoogleMap,\r\n\tmapContainerRef,\r\n\tmapInfo,\r\n\tdata,\r\n\tstations,\r\n\tloading\r\n}) => {\r\n\tfunction wait() {\r\n\t\tif (!googleMap || !mapContainerRef.current) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Init map & markers\r\n\t\tconst map = new googleMap.maps.Map(mapContainerRef.current, mapInfo);\r\n\t\tconst markers = [];\r\n\t\tconst infoWindows = [];\r\n\r\n\t\tdata.carto.markers.marker.map(marker => {\r\n\t\t\t// For each station push markers position to markers array\r\n\t\t\tmarkers.push(\r\n\t\t\t\tnew googleMap.maps.Marker({\r\n\t\t\t\t\tposition: {\r\n\t\t\t\t\t\tlat: parseFloat(marker._attributes.lat),\r\n\t\t\t\t\t\tlng: parseFloat(marker._attributes.lng)\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmap: map\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t\t// For each station push info window with address, free bikes & free space\r\n\t\t\tinfoWindows.push(\r\n\t\t\t\tnew googleMap.maps.InfoWindow({\r\n\t\t\t\t\tcontent: `<div className=\"infoWindow\">\r\n\t\t\t\t\t\t\t<h3>${marker._attributes.fullAddress}</h3>\r\n\t\t\t\t\t\t\t<h5>Število koles: ${\r\n\t\t\t\t\t\t\t\tstations[marker._attributes.number - 1].station.available._text\r\n\t\t\t\t\t\t\t}</h5>\r\n\t\t\t\t\t\t\t<h5>Število prostih mest: ${\r\n\t\t\t\t\t\t\t\tstations[marker._attributes.number - 1].station.free._text\r\n\t\t\t\t\t\t\t}</h5>\r\n          </div>`\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\t// Loop trough markers array, if mouseover, display info window on that marker\r\n\t\tfor (let i = 0; i < markers.length; i++) {\r\n\t\t\tmarkers[i].addListener(\"mouseover\", () => {\r\n\t\t\t\tinfoWindows[i].open(map, markers[i]);\r\n\t\t\t});\r\n\t\t\t// If mouseout, close the info window\r\n\t\t\tmarkers[i].addListener(\"mouseout\", () => {\r\n\t\t\t\tinfoWindows[i].close(map, markers[i]);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Return map to App.js\r\n\t\treturn map;\r\n\t}\r\n\r\n\t// Run wait() when loading changes value - loading will be set to false when App.js gets all the data\r\n\tuseEffect(() => {\r\n\t\twait();\r\n\t}, [loading]);\r\n};\r\n\r\nexport { useMap };\r\n","import { useState, useEffect } from \"react\";\r\nimport GoogleMapsApiLoader from \"google-maps-api-loader\";\r\n\r\n// Exported to Map.js\r\nconst useGoogleMap = apiKey => {\r\n\tconst [googleMap, setGoogleMap] = useState(null);\r\n\tuseEffect(() => {\r\n\t\tGoogleMapsApiLoader({ apiKey }).then(google => {\r\n\t\t\tsetGoogleMap(google);\r\n\t\t});\r\n\t}, []);\r\n\treturn googleMap;\r\n};\r\n\r\nconst mapInfo = {\r\n\tzoom: 14,\r\n\tcenter: { lat: 46.056946, lng: 14.505751 }\r\n};\r\n\r\nexport { useGoogleMap, mapInfo };\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport List from \"../components/Table\";\r\nimport { useMap } from \"../components/Marker\";\r\nimport { useGoogleMap, mapInfo } from \"../components/GoogleMap\";\r\nimport axios from \"axios\";\r\nimport convert from \"xml-js\";\r\nimport { Grid, Segment, Dimmer, Loader, Image } from \"semantic-ui-react\";\r\n\r\nconst App = () => {\r\n\tconst [data, setData] = useState(null);\r\n\tconst [stations, setStations] = useState([]);\r\n\tconst [loading, setLoading] = useState(true);\r\n\r\n\t// links for fetching data\r\n\tconst proxyurl = \"https://whispering-cove-30903.herokuapp.com/\";\r\n\tconst url = \"http://www.bicikelj.si/service/carto\";\r\n\tconst stationUrl = \"http://www.bicikelj.si/service/stationdetails/ljubljana/\";\r\n\r\n\t// Get station location and name\r\n\tasync function fetchData() {\r\n\t\tawait fetch(proxyurl + url)\r\n\t\t\t.then(response => response.text())\r\n\t\t\t.then(contents =>\r\n\t\t\t\tsetData(\r\n\t\t\t\t\t// Since Bicikelj uses XML, convert it to json\r\n\t\t\t\t\tJSON.parse(convert.xml2json(contents, { compact: true, spaces: 1 }))\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t.catch(error =>\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t\"Can’t access \" + url + \" response. Blocked by browser? or \" + error\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// Get station information about how many bikes and locks are free\r\n\tconst fetchStationInfo = async () => {\r\n\t\tlet i;\r\n\t\tlet stationArray = [];\r\n\t\t// make request for all 59 stations\r\n\t\tfor (i = 1; i <= 59; i++) {\r\n\t\t\tconst result = await axios(proxyurl + stationUrl + i);\r\n\t\t\tlet finalResult = JSON.parse(\r\n\t\t\t\tconvert.xml2json(result.data, { compact: true, spaces: 1 })\r\n\t\t\t);\r\n\t\t\tstationArray.push(finalResult);\r\n\t\t}\r\n\t\t// Set the stationArray with information to state\r\n\t\tsetStations(stationArray);\r\n\t\t// Set the loading state to false, to pass it for loading spinner\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\t// Call useEffect, only once\r\n\tuseEffect(() => {\r\n\t\tfetchData();\r\n\t\tfetchStationInfo();\r\n\t}, []);\r\n\r\n\t// Map information\r\n\tconst googleMap = useGoogleMap(\"AIzaSyDjfCiAbexFHp5OujzznVrIYIwyJUPuNBo\");\r\n\tconst mapContainerRef = useRef(null);\r\n\t// Init map\r\n\tuseMap({ googleMap, mapContainerRef, mapInfo, data, stations, loading });\r\n\r\n\tif (loading == true) {\r\n\t\treturn (\r\n\t\t\t<Dimmer active inverted>\r\n\t\t\t\t<Loader inverted content=\"Nalagam\" size=\"huge\" className=\"loader\" />\r\n\t\t\t</Dimmer>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Grid stackable columns=\"equal\">\r\n\t\t\t\t<Grid.Column width={10}>\r\n\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t<div className=\"map\" ref={mapContainerRef} />\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t<List data={data} loading={loading} stations={stations} />\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./layout/App\";\nimport \"../node_modules/semantic-ui-css/semantic.min.css\";\nimport \"./style.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}